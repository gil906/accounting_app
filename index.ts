

















































































printTree(netWorth);// Run};  ],    },      value: 10000,      name: 'Assets',    {    },      value: 500,      name: 'Cash',    {    },      ],        },          ],            },              value: 1200,              name: 'Stocks',            {            },              value: 3000,              name: 'Bank 1',            {          children: [          value: 0,          name: 'User 2',        {        },          ],            },              value: 1500,              name: 'Stocks',            {            },              value: 2000,              name: 'Bank 2',            {            },              value: 1000,              name: 'Bank 1',            {          children: [          value: 0,          name: 'User 1',        {      children: [      value: 0,      name: 'Income',    {  children: [  value: 0,  name: 'Net Worth',const netWorth: AccountNode = {// Sample data}  }    }      printTree(child, indent + 2);    for (const child of node.children) {  if (node.children) {  console.log(`${' '.repeat(indent)}${node.name} ($${total})`);  const total = calculateTotal(node);function printTree(node: AccountNode, indent = 0): void {}  return total;  }    }      total += calculateTotal(child);    for (const child of node.children) {  if (node.children) {  let total = node.value;function calculateTotal(node: AccountNode): number {}  children?: AccountNode[];  value: number;  name: string;interface AccountNode {